/*
  Web Server
 
 A simple web server that shows the value of the analog input pins.
 using an Arduino Wiznet Ethernet shield. 
 
 Circuit:
 * Ethernet shield attached to pins 10, 11, 12, 13
 * Analog inputs attached to pins A0 through A5 (optional)
 
 created 18 Dec 2009
 by David A. Mellis
 modified 9 Apr 2012
 by Tom Igoe
 
 */

#include <SPI.h>
#include <Ethernet.h>
#include <RCSwitch.h>
#include <ps2dev.h>

RCSwitch mySwitch = RCSwitch();
PS2dev keyboard(3, 2); //clock, data

// Enter a MAC address and IP address for your controller below.
// The IP address will be dependent on your local network:
byte mac[] = { 
  0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
IPAddress ip(10,44,13,2);
const int RELAY_BASE = 7;
byte line[256];
byte line_idx = 0;

// Initialize the Ethernet server library
// with the IP address and port you want to use 
// (port 80 is default for HTTP):
EthernetServer server(80);

void setup() {
 // Open serial communications and wait for port to open:
  Serial.begin(9600);
  for (int i = 4; i <= 7; i++) {
    pinMode(i, OUTPUT);
    digitalWrite(i, LOW);
  }

  // start the Ethernet connection and the server:
  Ethernet.begin(mac, ip);
  server.begin();
  Serial.print("server is at ");
  Serial.println(Ethernet.localIP());
  
   // Transmitter is connected to Arduino Pin #10  
  mySwitch.enableTransmit(9);

  // Optional set pulse length.
  mySwitch.setPulseLength(322);
  
  // Optional set protocol (default is 1, will work for most outlets)
  mySwitch.setProtocol(1);
  
  // Optional set number of transmission repetitions.
  // mySwitch.setRepeatTransmit(15);
}


void loop() {
  unsigned char leds;
  keyboard.keyboard_handle(&leds);

  // listen for incoming clients
  EthernetClient client = server.available();
  if (client) {
    Serial.println("new client");
    // an http request ends with a blank line
    boolean currentLineIsBlank = true;
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        if (line_idx < 255) {
          // Add character to line buffer
          line[line_idx] = c;
          line_idx++;
        }
        Serial.write(c);
        // if you've gotten to the end of the line (received a newline
        // character) and the line is blank, the http request has ended,
        // so you can send a reply
        if (c == '\n' && line_idx >= 29 && strncmp((char*)line, "POST /press?relay=", 12) == 0) {
            // POST /press?relay=1&duration=1
            // 012345678901234567890123456789
            int relay = line[18] - '1';
            int duration = line[29] - '0';
            digitalWrite(RELAY_BASE - relay, HIGH);
            delay(duration*1000);
            digitalWrite(RELAY_BASE - relay, LOW);
        }
        if (c == '\n' && line_idx >= 30 && strncmp((char*)line, "POST /transmit?code=", 20) == 0) {
            // POST /transmit?code=000101010101000101010111
            // 01234567890123456789012345678901234567890123
            line[44] = '\0';
            mySwitch.send((char*)(line + 20));
        }
        if (c == '\n' && line_idx >= 14 && strncmp((char*)line, "POST /ps2?init", 16) == 0) {
            // POST /ps2?init=1
            // 0123456788901234
            Serial.println("ps2 init");
            unsigned long timecount = millis();
            while ((millis() - timecount) < 100) {
                if (keyboard.write(0xAA) == 0) {
                    break;
                }
            }
            delay(10);
        }
        if (c == '\n' && line_idx >= 14 && strncmp((char*)line, "POST /ps2?code=", 15) == 0) {
            // POST /ps2?code=
            // 012345678901234
            Serial.println("ps2 send");
            char *p = (char*)(line + 15);
            while (1) {
                byte code = 0;
                if (*p >= '0' && *p <= '9') {
                    code |= *p - '0';
                } else if (*p >= 'A' && *p <= 'F') {
                    code |= 10 + *p - 'A';
                } else {
                    break;
                }
                p++;
                code *= 16;
                if (*p >= '0' && *p <= '9') {
                    code += *p - '0';
                } else if (*p >= 'A' && *p <= 'F') {
                    code += 10 + *p - 'A';
                } else {
                    break;
                }
                p++;
                if (*p == 'p') {
                    Serial.println("press");
                    keyboard.keyboard_press(code);
                } else if (*p == 'r') {
                    Serial.println("release");
                    keyboard.keyboard_release(code);
                } else if (*p == 'm') {
                    Serial.println("make");
                    keyboard.keyboard_mkbrk(code);
                } else if (*p == 'M') {
                    Serial.println("makespecial");
                    keyboard.keyboard_special_mkbrk(code);
                }
                p++;
            }
        }
        if (c == '\n') {
          line_idx = 0;
        }
        if (c == '\n' && currentLineIsBlank) {
          // send a standard http response header
          client.println("HTTP/1.1 200 OK");
          client.println("Content-Type: text/html");
          client.println("Connection: close");  // the connection will be closed after completion of the response
	  client.println("Refresh: 5");  // refresh the page automatically every 5 sec
          client.println();
          client.println("<!DOCTYPE HTML>");
          client.println("<html>");
          client.println("</html>");
          break;
        }
        if (c == '\n') {
          // you're starting a new line
          currentLineIsBlank = true;
        } 
        else if (c != '\r') {
          // you've gotten a character on the current line
          currentLineIsBlank = false;
        }
      }
    }
    // give the web browser time to receive the data
    delay(1);
    // close the connection:
    client.stop();
    Serial.println("client disonnected");
  }
}
